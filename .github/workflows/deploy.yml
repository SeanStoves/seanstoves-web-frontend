# This is a basic workflow to help you get started with Actions

name: Deploy

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: Update Portainer Container
        run: |
          API_URI="https://panel.chaoticlogic.us"
          CONTAINER_ID="SeanStoves-Web-Frontend"
          ENDPOINT_URI="1"
          echo "Getting Auth Token"
          AUTH_TOKEN=`curl -X POST $API_URI/api/auth -H "Content-Type: application/json" -d "{\"Username\": \"${{ secrets.PORTAINER_USER}}\", \"Password\": \"${{ secrets.PORTAINER_PASSWORD}}\"}" | jq -r ".jwt" | tr -d "\n"`
          echo "Stopping Old Container"
          curl -H "Content-Type: application/json" -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/endpoints/$ENDPOINT_URI/docker/containers/$CONTAINER_ID/stop" --data-raw "{}"
          echo "Renaming old Container"
          curl -H "Content-Type: application/json" -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/endpoints/$ENDPOINT_URI/docker/containers/$CONTAINER_ID/rename?name=%2F$CONTAINER_ID-old" --data-raw "{}"
          echo "Create new container"
          CONTAINER_CREATION_RESPONSE=`curl -H "Content-Type: application/json" -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/endpoints/$ENDPOINT_URI/docker/containers/create?name=$CONTAINER_ID" --data-raw "{\"Cmd\":[\"/bin/sh\",\"-c\",\"npm start\"],\"Entrypoint\":[\"docker-entrypoint.sh\"],\"Env\":[\"GOOGLE_ID=${{ secrets.GOOGLE_ID}}\",\"GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET}}\",\"NEXTAUTH_URL=https://www.seanstoves.com\",\"SECRET=${{ secrets.SITE_SECRET}}\"],\"Image\":\"registry.chaoticlogic.us/seanstoves_web_frontend:latest\",\"Labels\":{},\"OnBuild\":null,\"OpenStdin\":false,\"StdinOnce\":false,\"Tty\":false,\"User\":\"\",\"WorkingDir\":\"/home/node/app\",\"HostConfig\":{\"AutoRemove\":false,\"RestartPolicy\":{\"MaximumRetryCount\":0,\"Name\":\"unless-stopped\"}},\"name\":\"$CONTAINER_ID\",\"ExposedPorts\":{\"3000/tcp\":{}},\"NetworkingConfig\":{\"EndpointsConfig\":{\"nginx\":{\"IPAMConfig\":{\"IPv4Address\":\"172.18.0.3\"},\"IPAddress\":\"172.18.0.3\"}}}}"`
          echo "Starting Container"
          curl -H "Content-Type: application/json" -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/endpoints/$ENDPOINT_URI/docker/containers/$CONTAINER_ID/start" --data-raw "{}"
          echo "Get Resource Control ID"
          NEW_RESOURCE_CONTROL_ID=`echo $CONTAINER_CREATION_RESPONSE | jq -r ".Portainer.ResourceControl.Id"`
          echo "Lock down new container"
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/resource_controls/$NEW_RESOURCE_CONTROL_ID" --data-raw "{\"AdministratorsOnly\":true,\"Public\":false,\"Users\":[],\"Teams\":[]}"
          echo "Delete old container"
          curl -X DELETE -H "Authorization: Bearer $AUTH_TOKEN" "$API_URI/api/endpoints/$ENDPOINT_URI/docker/containers/$CONTAINER_ID-old?force=true&v=1"
